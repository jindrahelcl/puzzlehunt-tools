#!/usr/bin/env python3

import sys
import pickle
import math

import jmc

def single_loss(model, gram, branch):
    return -math.log(
        sum(model.lambdas[len(gram) + branch:])/model.vocab_size
        + sum(
            model.lambdas[len(gram) - k - 1]*model.single_prob(gram[k:])
            for k in range(len(gram))
        )
    )

def get_descriptor(model):
    return {
        "stats": [{
            gram.replace("\N{LOWER ONE EIGHTH BLOCK}", "\n"):
                single_loss(model, gram, branch)
            for k, counts in enumerate(model.counts, -model.order)
                if branch + k < 0
            for gram in counts
        } for branch in range(model.order)],
    }

if __name__ == "__main__":
    if len(sys.argv) != 1:
        sys.exit("Usage: {} < model.ngram > model.jmc".format(sys.argv[0]))
    descriptor = get_descriptor(pickle.load(sys.stdin.buffer))
    jmc_model = jmc.Jmc(**descriptor)
    jmc_model.dump(sys.stdout.buffer)
