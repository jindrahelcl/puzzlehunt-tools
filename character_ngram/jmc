#!/usr/bin/env python3

##
# Copyright (C) 2022 Tomas "trosos" Tintera
#
# Permission to use, copy, modify, and/or distribute this
# software for any purpose with or without fee is hereby
# granted.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS
# ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH
# THE USE OR PERFORMANCE OF THIS SOFTWARE.
##

import sys

import jmc
import subcli

DEFAULT_BEST_LIMIT = 10
DEFAULT_PRESORT_EXPONENT = 24
subcommand = subcli.Subcommand()


def showhelp(argv, msg):
    sys.exit("Usage: {} {} {}\n\n{}".format(
        *argv[:2],
        msg,
        subcommand.commands[argv[1]].__doc__)
    )


def checkargs(argv, msg, count_min, count_max=None):
    """Quick hack to check number of args and show usage"""
    firstarg = argv[2] if len(argv) >= 3 else None
    if firstarg == "--":
        del argv[2]
    elif firstarg == "--help":
        showhelp(argv, msg)
    count_max = count_max or count_min
    if not (count_min <= len(argv) <= (count_max or count_min)):
        showhelp(argv, msg)


@subcommand("loss")
def loss(argv):
    "Score each line (the lower the better)"
    checkargs(argv, "model.jmc < input.txt", 3)
    model = jmc.Jmc.load(argv[2])
    for line in sys.stdin:
        print(model.loss(model.decorate(line.rstrip("\n"))))


@subcommand("sort")
def sort(argv):
    "Sort input lines by score"
    checkargs(argv, "model.jmc < input.txt", 3)
    model = jmc.Jmc.load(argv[2])
    in_lines = (model.decorate(line.rstrip("\n")) for line in sys.stdin)
    for line in model.sort(in_lines):
        print(model.undecorate(line))


@subcommand("best")
def best(argv):
    "Like sort, but return only first NUM lines"
    checkargs(argv, "model.jmc [NUM] < input.txt", 3, 4)
    model = jmc.Jmc.load(argv[2])
    if len(argv) < 4:
        limit = DEFAULT_BEST_LIMIT
    else:
        limit = int(argv[3])
    in_lines = (model.decorate(line.rstrip("\n")) for line in sys.stdin)
    for line in model.best(limit, in_lines):
        print(model.undecorate(line))


@subcommand("latin")
def latin(argv):
    "Remove diacritics, leave only Latin chars"
    checkargs(argv, "< input.txt", 2)
    for line in sys.stdin:
        print(jmc.Jmc.latin(line.rstrip("\n")))


@subcommand("alpha")
def alpha(argv):
    "Transliterate to Latin without numerals"
    checkargs(argv, "< input.txt", 2)
    for line in sys.stdin:
        print(jmc.Jmc.alpha(line.rstrip("\n")))


@subcommand("presort")
def presort(argv):
    "Sort 2^NUM-sized batches of input lines"
    checkargs(argv, "[NUM] < input.txt", 2, 3)
    if len(argv) < 3:
        exponent = DEFAULT_PRESORT_EXPONENT
    else:
        exponent = int(argv[2])
    in_lines = (line.rstrip("\n") for line in sys.stdin)
    for line in jmc.Jmc.presort(2**exponent, in_lines):
        print(line)


subcommand.run(sys.argv[:], sys.exit)
